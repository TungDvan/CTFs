# flag = [
#     0x54, 0x55, 0x4E, 0x47, 0x44, 0x56, 0x41, 0x4E, 0x54, 0x55, 
#     0x4E, 0x47, 0x44, 0x56, 0x41, 0x4E, 0x54, 0x55, 0x4E, 0x47, 
#     0x44, 0x56, 0x41, 0x4E, 0x54, 0x55, 0x4E, 0x47, 0x44, 0x56, 
#     0x41, 0x4E
# ]   # TUNGDVANTUNGDVANTUNGDVANTUNGDVAN

# all_char = [
#   0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 
#   0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 
#   0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x61, 0x62, 0x63, 0x64, 
#   0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 
#   0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 
#   0x79, 0x7A, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 
#   0x38, 0x39, 0x2B, 0x2F
# ]

# def in_8_bit_cua_so(num):
#     # Sử dụng hàm format để đảm bảo chuỗi nhị phân có độ dài 8 bit
#     return list(f"{num:08b}")

# map_bit = []

# for i in range(len(flag)):
#     converted_list = [int(x) for x in in_8_bit_cua_so(flag[i])]
#     map_bit += converted_list

# # print(map)
# # print(len(map))

# v4 = 0x100
# v12 = 2
# v13 = 0x2B
# v14 = 0

# # print(map_bit)

# ans = []

# for i in range(0, 0x100, 6):
#     if v12 - 2 >= v4: v14 = 0
#     else: v14 = map_bit[i]
#     v15 = 2 * v14
#     if (v12 - 1 < v4): v15 |= map_bit[i + 1]
#     v17 = 2 * v15
#     if (v12 < v4): v17 |= map_bit[i + 2]
#     v18 = 2 * v17
#     if (v12 + 1 < v4): v18 |= map_bit[i + 3]
#     v19 = 2 * v18
#     if (v12 + 2 < v4): v19 |= map_bit[i + 4]
#     v20 = 2 * v19
#     if (v12 + 3 < v4): v20 |= map_bit[i + 5]
#     v12 += 6
#     ans.append(all_char[v20])
#     # *v11++ = aAbcdefghijklmn[v20];

# for i in ans: print(end = chr(i))


xor_base64 = [
  0x92, 0xA1, 0x27, 0xE0, 0x37, 0xCA, 0x70, 0x7E, 0xE6, 0xBE, 
  0x33, 0x1D, 0x5D, 0xFE, 0x29, 0x93, 0xB6, 0x66, 0xF9, 0x02, 
  0x6A, 0x74, 0x0D, 0xDF, 0xD6, 0xEC, 0x5A, 0x71, 0xC8, 0xA3, 
  0xFD, 0x84, 0xC5, 0x13, 0x1E, 0x87, 0xC7, 0x52, 0x50, 0x55, 
  0x01, 0x16, 0xFD, 0xCF
]

flag_en = [
  0xC1, 0x91, 0x69, 0xB4, 0x66, 0xF9, 0x04, 0x12, 0xB2, 0xD3, 
  0x7D, 0x6B, 0x0F, 0xB9, 0x7F, 0xF5, 0xD2, 0x1C, 0xBF, 0x32, 
  0x0B, 0x32, 0x34, 0x9C, 0x98, 0xA4, 0x14, 0x37, 0x86, 0xC9, 
  0xAF, 0xE2, 0x9C, 0x46, 0x2B, 0xEC, 0x9F, 0x63, 0x38, 0x23, 
  0x54, 0x78, 0xCD, 0xF2
]

base64_string = ''

for i in range(len(flag_en)):
  base64_string += (chr(flag_en[i] ^ xor_base64[i]))

import base64
decoded_bytes = base64.b64decode(base64_string)
print(decoded_bytes)







