my_list = [
    0xAA425912, 0xFFFFAF3A, 0xC1ACEE70, 0x1249CE1A, 0x0EFF74D9, 0xB919D30E, 0x84DE0726, 0x492F5EBC, 0xF21D2A53, 0xCDA5EC38,
    0x2853DDFE, 0x55D49EB4, 0xB38053DB, 0xE3F73D9B, 0xBB6D180B, 0x97E1DD5D, 0x70B1763F, 0xB4BE9AE0, 0x4430231C, 0x61C8D9C7,
    0xCF27F5C0, 0x614ABC1E, 0x987EAB5F, 0x529E6465, 0xACAE14B5, 0x5431CAB1, 0xE9BFC176, 0xB3FFE922, 0x0BF5C4F3, 0x6540648F,
    0xAFCB98E2, 0x90AF39D2, 0x97F98552, 0x84780750, 0xB3175EB0, 0xD5D3909F, 0xA94C67C2, 0x15E26700, 0xB399034D, 0xF5B0AAD2,
    0x5738D4BF, 0x32A1096A, 0x71FE5D01, 0x82999D2C, 0xE7632562, 0xDD385C32, 0xBBD3BD30, 0xFEBC529F, 0x380CCD6D, 0x1824549D,
    0x21296FFC, 0x5ABDCBEE, 0x8AD5743F, 0x2DD18A76, 0x65528469, 0x252C460E, 0xC5F5A4C7, 0x16272361, 0x9CF269D3, 0xD5B6C1D8,
    0xBDCC632C, 0xE66B9092, 0xE11C8988, 0xF5FF1CF1, 0x94C984A1, 0xA34DDEFF, 0x69BDD88B, 0x578E9A93, 0xEF550056, 0x78D797B8,
    0x5E8D9CD6, 0xC4CC1754, 0x8E3FB954, 0xA5663413, 0x5CC8A863, 0x566620BD, 0x93764D99, 0xE9CD5DB5, 0x48A36542, 0xBDBECFE5,
    0x28616D15, 0x136B9E2E, 0x1C56E934, 0xC5AE4A25, 0xBB4B1E7C, 0xF023F277, 0x83DF8CC8, 0x19C369CD, 0x3E5597BD, 0x483BD09E,
    0x7EBF09CB, 0x51AA2024, 0x45A5F25E, 0xA3FAD4A1, 0x9985C1CA, 0x0E0546A6, 0x162A8EA7, 0x8E998BAC, 0xF0E0277C, 0xE48896F6
]

# 0x0EFF74D9, 0x1249CE1A, 0x2853DDFE, 0x492F5EBC, 0x84DE0726, 0xAA425912, 0xB919D30E, 0xC1ACEE70, 0xCDA5EC38, 0xF21D2A53,
# 0xFFFFAF3A, 0x55D49EB4, 0xB38053DB, 0xE3F73D9B, 0xBB6D180B, 0x97E1DD5D, 0x70B1763F, 0xB4BE9AE0, 0x4430231C, 0x61C8D9C7,
# 0xCF27F5C0, 0x614ABC1E, 0x987EAB5F, 0x529E6465, 0xACAE14B5, 0x5431CAB1, 0xE9BFC176, 0xB3FFE922, 0x0BF5C4F3, 0x6540648F,
# 0xAFCB98E2, 0x90AF39D2, 0x97F98552, 0x84780750, 0xB3175EB0, 0xD5D3909F, 0xA94C67C2, 0x15E26700, 0xB399034D, 0xF5B0AAD2,
# 0x5738D4BF, 0x32A1096A, 0x71FE5D01, 0x82999D2C, 0xE7632562, 0xDD385C32, 0xBBD3BD30, 0xFEBC529F, 0x380CCD6D, 0x1824549D,
# 0x21296FFC, 0x5ABDCBEE, 0x8AD5743F, 0x2DD18A76, 0x65528469, 0x252C460E, 0xC5F5A4C7, 0x16272361, 0x9CF269D3, 0xD5B6C1D8,
# 0xBDCC632C, 0xE66B9092, 0xE11C8988, 0xF5FF1CF1, 0x94C984A1, 0xA34DDEFF, 0x69BDD88B, 0x578E9A93, 0xEF550056, 0x78D797B8,
# 0x5E8D9CD6, 0xC4CC1754, 0x8E3FB954, 0xA5663413, 0x5CC8A863, 0x566620BD, 0x93764D99, 0xE9CD5DB5, 0x48A36542, 0xBDBECFE5,
# 0x28616D15, 0x136B9E2E, 0x1C56E934, 0xC5AE4A25, 0xBB4B1E7C, 0xF023F277, 0x83DF8CC8, 0x19C369CD, 0x3E5597BD, 0x483BD09E,
# 0x7EBF09CB, 0x51AA2024, 0x45A5F25E, 0xA3FAD4A1, 0x9985C1CA, 0x0E0546A6, 0x162A8EA7, 0x8E998BAC, 0xF0E0277C, 0xE48896F6,


# Chỉ định vị trí i và j
i, j = 0, 1  # Sắp xếp từ chỉ số 2 đến chỉ số 7 (tính cả chỉ số 7)

# Sắp xếp phần từ i đến j (bao gồm j)
my_list[i:j+1] = sorted(my_list[i:j+1])

# In kết quả
n = 4
for i in range(len(my_list)):
    if i % 10 == 9: print(f'0x{my_list[i]:0{2*n}X}', end = ',\n')
    else: print(f'0x{my_list[i]:0{2*n}X}', end = ', ')
