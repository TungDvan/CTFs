flag = [
    0x41, 0x42, 0x43, 0x44, 0x41, 0x42, 0x43, 0x44, 0x41, 0x42, 
    0x43, 0x44, 0x41, 0x42, 0x43, 0x44, 0x41, 0x42, 0x43, 0x44, 
    0x41, 0x42, 0x43, 0x44, 0x41, 0x42, 0x43, 0x44, 0x41, 0x42, 
    0x43, 0x44, 0x41, 0x42, 0x43, 0x44, 0x41, 0x42, 0x43, 0x44
]   # ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCD

flag_en = [
    0xF30C0330, 0x340DDE9D, 0x750D9AC9, 0x391FBC2A, 0x9F16AF5B, 0xE6180661, 0x6C1AAC6B, 0x340DDE9D, 0xB60D5635, 0x9F16AF5B,
    0xA3195364, 0x681BBD3A, 0xF30C0330, 0xA3195364, 0xAB1B71C6, 0xF30C0330, 0xF21D5274, 0x9F16AF5B, 0xE6180661, 0x300CCFCC,
    0xF21D5274, 0x9F16AF5B, 0xAB1B71C6, 0xA3195364, 0x750D9AC9, 0xA3195364, 0x9F16AF5B, 0xF21D5274, 0xF30C0330, 0xA3195364,
    0xF21D5274, 0x351C8FD9, 0x710C8B98, 0xF70D1261, 0x2D1AE83F, 0xF30C0330, 0xEE1A24C3, 0xF70D1261, 0x6108CEDC, 0x6108CEDC
]

all_char = [
    0x7a, 0x78, 0x63, 0x76, 0x62, 0x6e, 0x6d, 0x2c, 0x2e, 0x2f,
    0x5a, 0x58, 0x43, 0x56, 0x42, 0x4e, 0x4d, 0x3c, 0x3e, 0x3f,
    0x61, 0x73, 0x64, 0x66, 0x67, 0x68, 0x6a, 0x6b, 0x6c, 0x3b,
    0x27, 0x41, 0x53, 0x44, 0x46, 0x47, 0x48, 0x4a, 0x4b, 0x4c,
    0x3a, 0x22, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x75, 0x69,
    0x6f, 0x70, 0x5b, 0x5d, 0x5c, 0x51, 0x57, 0x45, 0x52, 0x54,
    0x59, 0x55, 0x49, 0x4f, 0x50, 0x7b, 0x7d, 0x7c, 0x60, 0x31,
    0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x2d,
    0x3d, 0x7e, 0x21, 0x40, 0x23, 0x24, 0x25, 0x5e, 0x26, 0x2a,
    0x28, 0x29, 0x5f, 0x2b
] 

# v2 = 0x811C9DC5

# for i in range(len(flag)):
#     v2 = (0x1000193 * (flag[i] ^ v2)) & 0xFFFFFFFF

# print(hex(v2))


def __ROL4__(value, shift):
    value &= 0xFFFFFFFF  # Ensure value is within 32-bit range
    shift %= 32          # Ensure shift is within 32-bit range
    return ((value << shift) | (value >> (32 - shift))) & 0xFFFFFFFF

def __ROR4__(value, shift):
    """Rotate right (ROR) operation for 32-bit integers."""
    value &= 0xFFFFFFFF  # Ensure value is within 32-bit range
    shift %= 32          # Ensure shift is within 32-bit range
    return ((value >> shift) | (value << (32 - shift))) & 0xFFFFFFFF


# Example usage
# INPUT_I = 0x41  # Example input
# v5 = 4                # Example shift for __ROL4__
# v6 = 6                # Example shift for __ROR4__

# result = simulate_operation(INPUT_I, v5, v6)
# print(f"Result: {hex(result)}")

for i in range(len(flag_en)):

    for j in all_char:
        v5 = 4                # Example shift for __ROL4__
        v6 = 6                # Example shift for __ROR4__
        tmp = j
        for k in range(5):
            tmp ^= __ROL4__(tmp, v5) ^ __ROR4__(tmp, v6)
            v5 *= 2
            v6 *= 2
        if (tmp == flag_en[i]): 
            print(end = chr(j))
            break



# for i in range(len(flag)):
#     v5 = 4                # Example shift for __ROL4__
#     v6 = 6                # Example shift for __ROR4__
#     for j in range(5):
#         flag[i] ^= __ROL4__(flag[i], v5) ^ __ROR4__(flag[i], v6)
#         v5 *= 2
#         v6 *= 2
#     print(hex(flag[i]))


# for i in range(len(flag)):
#     print()

# KCSC{345y_fl46_ch3ck3r_f0r_kc5c_r3cru17m3n7!!}

# KCSC{345y_fl46_ch3ck3r_f0r_kc5c_r3cru17m3n7!!}